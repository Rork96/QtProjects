CREATE ROLE "Users" NOSUPERUSER NOCREATEDB NOCREATEROLE NOCREATEUSER NOREPLICATION INHERIT LOGIN;
CREATE ROLE "Readers" NOSUPERUSER NOCREATEDB NOCREATEROLE NOCREATEUSER NOREPLICATION INHERIT LOGIN;
CREATE ROLE "Editors" NOSUPERUSER NOCREATEDB NOCREATEROLE NOCREATEUSER NOREPLICATION INHERIT LOGIN;

CREATE ROLE user WITH PASSWORD 'Password';
CREATE ROLE reader WITH PASSWORD 'Password';
CREATE ROLE editor WITH PASSWORD 'Password';

GRANT "Users" TO user;
GRANT "Readers" TO reader;
GRANT "Editors" TO editor;

GRANT SELECT, INSERT, UPDATE, DELETE ON main_table, equipment_table, worker_table to "user"

GRANT INSERT ON main_table TO "editor"
GRANT SELECT ON equipment_table, worker_table TO "editor"

GRANT SELECT ON main_table, equipment_table, worker_table to "reader"

ALTER TABLE main_table, equipment_table, worker_tabl DISABLE ROW LEVEL SECURITY

GRANT USAGE ON SEQUENCE main_table_id_seq TO user
GRANT USAGE ON SEQUENCE main_table_id_seq TO editor

GRANT USAGE ON SEQUENCE acoount_table_id_seq TO "user"
GRANT SELECT, UPDATE ON account_table TO "user"

CREATE OR REPLACE FUNCTION setEditor()
  RETURNS TRIGGER AS
  $func$
  BEGIN
    NEW.edit_date := current_date;
    RETURN NEW;
  end;
$func$ LANGUAGE plpgsql;

CREATE TRIGGER set_editor
BEFORE UPDATE ON main_table
FOR ROW EXECUTE PROCEDURE setEditor();


CREATE OR REPLACE FUNCTION process_select_to_account()
  RETURNS TRIGGER AS
$select_to$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            IF ( (SELECT account_table.id FROM account_table WHERE account_table.order_numb = OLD.order_number AND account_table.equip_name = OLD.equipment AND account_table.part_name = OLD.part) <> 0) THEN
                UPDATE account_table SET otk_finish = (SELECT SUM(otk) FROM main_table WHERE
                        main_table.order_number = OLD.order_number AND main_table.equipment = OLD.equipment AND main_table.part = OLD.part),
                    time_sum = (SELECT SUM(hours_count)  FROM main_table WHERE
                        main_table.order_number = OLD.order_number AND main_table.equipment = OLD.equipment AND main_table.part = OLD.part)
                WHERE account_table.id =
                      (SELECT account_table.id FROM account_table WHERE account_table.order_numb = OLD.order_number AND account_table.equip_name = OLD.equipment AND account_table.part_name = OLD.part);
            ELSE
                DELETE FROM account_table WHERE order_numb = OLD.order_number AND equip_name = OLD.equipment AND part_name = OLD.part
                AND otk_finish = OLD.otk AND time_sum = OLD.hours_count;
            END IF;
            IF NOT FOUND THEN RETURN NULL; END IF;
            RETURN OLD;
        ELSIF (TG_OP = 'INSERT') THEN
            IF ( (SELECT account_table.id FROM account_table WHERE account_table.order_numb = NEW.order_number AND account_table.equip_name = NEW.equipment AND account_table.part_name = NEW.part) <> 0) THEN
                UPDATE account_table SET otk_finish = (SELECT SUM(otk) FROM main_table WHERE
                        main_table.order_number = NEW.order_number AND main_table.equipment = NEW.equipment AND main_table.part = NEW.part),
                    time_sum = (SELECT SUM(hours_count)  FROM main_table WHERE
                        main_table.order_number = NEW.order_number AND main_table.equipment = NEW.equipment AND main_table.part = NEW.part)
                WHERE account_table.id =
                      (SELECT account_table.id FROM account_table WHERE account_table.order_numb = NEW.order_number AND account_table.equip_name = NEW.equipment AND account_table.part_name = NEW.part);
            ELSE
                INSERT INTO account_table (order_numb, equip_name, part_name, otk_finish, time_sum)
                VALUES (NEW.order_number, NEW.equipment, NEW.part, NEW.otk, NEW.hours_count);
            END IF;
            RETURN  NEW;
        ELSIF (TG_OP = 'UPDATE') THEN
            UPDATE account_table SET order_numb = NEW.order_number, equip_name = NEW.equipment, part_name = NEW.part,
                otk_finish = (SELECT SUM(otk) FROM main_table WHERE
                    main_table.order_number = NEW.order_number AND main_table.equipment = NEW.equipment AND main_table.part = NEW.part),
                time_sum = (SELECT SUM(hours_count)  FROM main_table WHERE
                    main_table.order_number = NEW.order_number AND main_table.equipment = NEW.equipment AND main_table.part = NEW.part)
            WHERE account_table.id =
                  (SELECT account_table.id FROM account_table WHERE account_table.order_numb = OLD.order_number AND account_table.equip_name = OLD.equipment AND account_table.part_name = OLD.part);
            RETURN NEW;
        END IF;
        RETURN NULL;
    END;
$select_to$ LANGUAGE plpgsql;

CREATE TRIGGER select_to_acoount_table
AFTER INSERT OR UPDATE OR DELETE ON main_table
FOR ROW EXECUTE PROCEDURE process_select_to_account();
